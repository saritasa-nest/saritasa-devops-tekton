apiVersion: tekton.dev/v1beta1
kind: Task
metadata:     
  name: slack-notification
spec:
  description: >-
    Send slack notification with various information about pipeline progress/result.
    You can see my question about dealing with task status here: https://github.com/tektoncd/pipeline/issues/3762

  params:
    - name: application
    - name: head_commit
    - name: head_commit_message
    - name: pusher_name
    - name: pusher_email
    - name: pusher_avatar
    - name: pusher_url
    - name: repository_url
    - name: environment
    - name: branch
    - name: status
    - name: pipelinerun_name
      default: "reserved"

  results:
    - name: pipelinerun_name
      description: The name of the pipelinerun

  stepTemplate:
    envFrom:
      - configMapRef:
          name: $(params.application)-build-pipeline-config
      - secretRef:
          name: $(params.application)-slack-secret  # used for webhook URL
    env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name

  steps:
    
    - name: get-pipelinerun-name
      image: bitnami/kubectl:latest
      script: |
        set +x; 
        pipelinerun_name=`kubectl -n ci get pipelinerun -l triggers.tekton.dev/trigger=$(params.application)-trigger --no-headers -o="custom-columns=NAME:.metadata.name, STATUS:.status.conditions[0].reason, COMPLETION:.status.completionTime"  | grep Running | sort -r -k3,3 | head -n 1 | awk '{print $1}'`
        set -x; 
        echo $pipelinerun_name | tee $(results.pipelinerun_name.path)

    - name: notification
      image: cloudposse/slack-notifier:sha-d5f4cf0
      script: |
        #!/bin/sh
        
        pipelinerun_name=`cat $(results.pipelinerun_name.path)`

        # let's obtain a random pipelinerun token from the pod name
        # which looks like this
        # build-pipeline-run-6hqdt
        # so we can then build the proper URL to the tekton dashboard
        # with results of that Pipeline
        pipeline_run_name=${POD_NAME%-*}
        status="`echo $(params.status) | tr '[:upper:]' '[:lower:]'`"

        echo "result: $status"

        if [ "$status" = "succeeded" ]; then
          color="good"
          thumb_url="$(params.pusher_avatar)"
          text_status="The latest changes to $(params.environment) have been deployed successfully"

        else
          color="danger"
          thumb_url="$SLACK_FAILURE_ICON_URL"
          text_status="The latest changes to $(params.environment) failed to be deployed"
        fi

        argo_app_url="$ARGOCD_SERVER/$ARGOCD_ROOT_PATH/applications/$(params.application)"
        argo_app_url=$(echo $argo_app_url | sed 's/\/\//\//g')
        argo_app_url="https://argo_app_url"

        slack-notifier \
        -user_name "Tekton" \
        -icon_emoji ":white_check_mark:" \
        -color "$color" \
        -author_name "$(params.pusher_name)" \
        -author_link "$(params.pusher_url)" \
        -title "$(params.head_commit_message)" \
        -text "$text_status" \
        -thumb_url "$thumb_url" \
        -field1_title "Open Application" \
        -field1_value "<$APPLICATION_URL|$(params.application)>" \
        -field1_short true \
        -field2_title "Environment" \
        -field2_value "$(params.environment)" \
        -field2_short true \
        -field3_title "Branch:Rev" \
        -field3_value "$(params.branch):$(params.head_commit)" \
        -field3_short false \
        -field4_title "Manage" \
        -field4_value "<$(params.repository_url)|Github Repository> | <$(params.repository_url)/issues|Github Issues> | <$JIRA_PROJECT_URL|Jira>" \
        -field4_short false \
        -field5_title "CI" \
        -field5_value "$TEKTON_URL/$pipelinerun_name" \
        -field5_short false \
        -field6_title "CD" \
        -field6_value "<$argo_app_url|Manage app in argocd>" \
        -field6_short false
